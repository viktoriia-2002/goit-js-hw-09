{"mappings":"iiBA4CA,IAAAA,EAAAC,EAAA,S,WAGA,IAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,aAAcF,SAASC,cAAc,kBACrCE,cAAeH,SAASC,cAAc,mBACtCG,cAAeJ,SAASC,cAAc,iBACtCI,UAAWL,SAASC,cAAc,WA4BpC,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACT,GAAIH,EAAe,CACjB,IAAMI,EAAU,uBAAwCC,OAAfV,EAAS,QAAYU,OAANT,EAAM,MAC9DU,EAAAtB,GAASuB,OAAOC,QAAQJ,GACxBN,EAAQ,CAAEH,WAAUC,S,KACf,CACL,IAAMa,EAAU,sBAAqCJ,OAAfV,EAAS,QAAYU,OAANT,EAAM,MAC3DU,EAAAtB,GAASuB,OAAOG,QAAQD,GACxBV,EAAO,CAAEJ,WAAUC,S,IAEpBA,E,IAtCPV,EAAKC,OAAOwB,iBAAiB,UAAU,SAAAC,GACrCA,EAAMC,iBAEN,IAAMjB,EAAQkB,OAAO5B,EAAKI,aAAayB,OACvC7B,EAAKI,aAAayB,MAAQnB,EAAMoB,WAOhC,IANA,IAAMC,EAASH,OAAO5B,EAAKK,cAAcwB,OACnCG,EAAOJ,OAAO5B,EAAKM,cAAcuB,OAEnCI,EAAe,IACbC,EAAW,GAERC,EAAI,EAAGA,GAAKJ,EAAQI,IAC3BD,EAASE,KAAK5B,EAAc2B,EAAGF,IAC/BA,GAAgBD,EAGlBrB,QAAQ0B,IAAIH,GACTI,MAAK,SAAAC,GACJC,QAAQC,IAAI,0BAA2BF,E,IAExCG,OAAM,SAAAC,GACLH,QAAQG,MAAM,iCAAkCA,E","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const refs = {\n//   formEl: document.querySelector('.form'),\n//   inputElDelay: document.querySelector('[name=\"delay\"]'),\n//   inputElAmount: document.querySelector('[name=\"amount\"]'),\n//   inputElNumber: document.querySelector('[name=\"step\"]'),\n//   btnSubmit: document.querySelector('button'),\n// };\n\n// refs.formEl.addEventListener('submit', event => {\n//   event.preventDefault();\n\n//   const delay = parseInt(refs.inputElDelay.value);\n//   refs.inputElDelay.value = delay;\n//   const amount = parseInt(refs.inputElAmount.value);\n//   const step = parseInt(refs.inputElNumber.value);\n\n//   let currentDelay = delay;\n//   for (let i = 1; i <= amount; i++) {\n//     setTimeout(() => createPromise(i, currentDelay), currentDelay);\n//     currentDelay += step;\n//   }\n// });\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         const message = `✅ Fulfilled promise ${position} in ${delay}ms`;\n//         Notiflix.Notify.success(message);\n//         resolve({ position, delay });\n//       } else {\n//         const message = `❌ Rejected promise ${position} in ${delay}ms`;\n//         Notiflix.Notify.failure(message);\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n////////////import Notiflix from 'notiflix';\nimport Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  inputElDelay: document.querySelector('[name=\"delay\"]'),\n  inputElAmount: document.querySelector('[name=\"amount\"]'),\n  inputElNumber: document.querySelector('[name=\"step\"]'),\n  btnSubmit: document.querySelector('button'),\n};\n\nrefs.formEl.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delay = Number(refs.inputElDelay.value);\n  refs.inputElDelay.value = delay.toString();\n  const amount = Number(refs.inputElAmount.value);\n  const step = Number(refs.inputElNumber.value);\n\n  let currentDelay = 1000;\n  const promises = [];\n\n  for (let i = 1; i <= amount; i++) {\n    promises.push(createPromise(i, currentDelay));\n    currentDelay += step;\n  }\n\n  Promise.all(promises)\n    .then(results => {\n      console.log('All promises fulfilled:', results);\n    })\n    .catch(error => {\n      console.error('One or more promises rejected:', error);\n    });\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        const message = `✅ Fulfilled promise ${position} in ${delay}ms`;\n        Notiflix.Notify.success(message);\n        resolve({ position, delay });\n      } else {\n        const message = `❌ Rejected promise ${position} in ${delay}ms`;\n        Notiflix.Notify.failure(message);\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","formEl","document","querySelector","inputElDelay","inputElAmount","inputElNumber","btnSubmit","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","message","concat","$parcel$interopDefault","Notify","success","message1","failure","addEventListener","event","preventDefault","Number","value","toString","amount","step","currentDelay","promises","i","push","all","then","results","console","log","catch","error"],"version":3,"file":"03-promises.837335a9.js.map"}