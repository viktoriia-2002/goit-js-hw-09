{"mappings":"qhBA4CA,IAAAA,EAAAC,EAAA,S,WAGA,MAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,aAAcF,SAASC,cAAc,kBACrCE,cAAeH,SAASC,cAAc,mBACtCG,cAAeJ,SAASC,cAAc,iBACtCI,UAAWL,SAASC,cAAc,WA4BpC,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACT,GAAIH,EAAe,CACjB,MAAMI,EAAU,uBAAqBT,QAAiBC,MACtDS,EAAArB,GAASsB,OAAOC,QAAQH,GACxBN,EAAQ,C,SAAEH,E,MAAUC,G,KACf,CACL,MAAMQ,EAAU,sBAAoBT,QAAeC,MACnDS,EAAArB,GAASsB,OAAOE,QAAQJ,GACxBL,EAAO,C,SAAEJ,E,MAAUC,G,IAEpBA,EAAM,G,CAtCbV,EAAKC,OAAOsB,iBAAiB,UAAUC,IACrCA,EAAMC,iBAEN,MAAMf,EAAQgB,OAAO1B,EAAKI,aAAauB,OACvC3B,EAAKI,aAAauB,MAAQjB,EAAMkB,WAChC,MAAMC,EAASH,OAAO1B,EAAKK,cAAcsB,OACnCG,EAAOJ,OAAO1B,EAAKM,cAAcqB,OAEvC,IAAII,EAAe,IACnB,MAAMC,EAAW,GAEjB,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAQI,IAC3BD,EAASE,KAAK1B,EAAcyB,EAAGF,IAC/BA,GAAgBD,EAGlBnB,QAAQwB,IAAIH,GACTI,MAAKC,IACJC,QAAQC,IAAI,0BAA2BF,EAAQ,IAEhDG,OAAMC,IACLH,QAAQG,MAAM,iCAAkCA,EAAM,GACtD","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const refs = {\n//   formEl: document.querySelector('.form'),\n//   inputElDelay: document.querySelector('[name=\"delay\"]'),\n//   inputElAmount: document.querySelector('[name=\"amount\"]'),\n//   inputElNumber: document.querySelector('[name=\"step\"]'),\n//   btnSubmit: document.querySelector('button'),\n// };\n\n// refs.formEl.addEventListener('submit', event => {\n//   event.preventDefault();\n\n//   const delay = parseInt(refs.inputElDelay.value);\n//   refs.inputElDelay.value = delay;\n//   const amount = parseInt(refs.inputElAmount.value);\n//   const step = parseInt(refs.inputElNumber.value);\n\n//   let currentDelay = delay;\n//   for (let i = 1; i <= amount; i++) {\n//     setTimeout(() => createPromise(i, currentDelay), currentDelay);\n//     currentDelay += step;\n//   }\n// });\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         const message = `✅ Fulfilled promise ${position} in ${delay}ms`;\n//         Notiflix.Notify.success(message);\n//         resolve({ position, delay });\n//       } else {\n//         const message = `❌ Rejected promise ${position} in ${delay}ms`;\n//         Notiflix.Notify.failure(message);\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n////////////import Notiflix from 'notiflix';\nimport Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  inputElDelay: document.querySelector('[name=\"delay\"]'),\n  inputElAmount: document.querySelector('[name=\"amount\"]'),\n  inputElNumber: document.querySelector('[name=\"step\"]'),\n  btnSubmit: document.querySelector('button'),\n};\n\nrefs.formEl.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delay = Number(refs.inputElDelay.value);\n  refs.inputElDelay.value = delay.toString();\n  const amount = Number(refs.inputElAmount.value);\n  const step = Number(refs.inputElNumber.value);\n\n  let currentDelay = 1000;\n  const promises = [];\n\n  for (let i = 1; i <= amount; i++) {\n    promises.push(createPromise(i, currentDelay));\n    currentDelay += step;\n  }\n\n  Promise.all(promises)\n    .then(results => {\n      console.log('All promises fulfilled:', results);\n    })\n    .catch(error => {\n      console.error('One or more promises rejected:', error);\n    });\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        const message = `✅ Fulfilled promise ${position} in ${delay}ms`;\n        Notiflix.Notify.success(message);\n        resolve({ position, delay });\n      } else {\n        const message = `❌ Rejected promise ${position} in ${delay}ms`;\n        Notiflix.Notify.failure(message);\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","formEl","document","querySelector","inputElDelay","inputElAmount","inputElNumber","btnSubmit","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","message","$parcel$interopDefault","Notify","success","failure","addEventListener","event","preventDefault","Number","value","toString","amount","step","currentDelay","promises","i","push","all","then","results","console","log","catch","error"],"version":3,"file":"03-promises.510da693.js.map"}