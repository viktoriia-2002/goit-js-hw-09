{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,WAGA,IAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,aAAcF,SAASC,cAAc,kBACrCE,cAAeH,SAASC,cAAc,mBACtCG,cAAeJ,SAASC,cAAc,iBACtCI,UAAWL,SAASC,cAAc,WAGpCH,EAAKC,OAAOO,iBAAiB,UAAU,SAAAC,G,kBAUnCC,YAAW,W,OAKf,SAAuBC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCR,YAAW,WACT,GAAIM,EAAe,CACjB,IAAMG,EAAU,uBAAwCC,OAAfT,EAAS,QAAYS,OAANR,EAAM,MAC9DS,EAAAvB,GAASwB,OAAOC,QAAQJ,GACxBL,EAAQ,CAAEH,WAAUC,S,KACf,CACL,IAAMY,EAAU,sBAAqCJ,OAAfT,EAAS,QAAYS,OAANR,EAAM,MAC3DS,EAAAvB,GAASwB,OAAOG,QAAQD,GACxBT,EAAO,CAAEJ,WAAUC,S,IAEpBA,E,IAlBcc,CAAcC,EAAGC,E,GAAeA,GACjDA,GAAgBC,C,EAVlBpB,EAAMqB,iBAEN,IAAMlB,EAAQmB,SAAS/B,EAAKI,aAAa4B,OACzChC,EAAKI,aAAa4B,MAAQpB,EAK1B,IAJA,IAAMqB,EAASF,SAAS/B,EAAKK,cAAc2B,OACrCH,EAAOE,SAAS/B,EAAKM,cAAc0B,OAErCJ,EAAehB,EACVsB,EAAI,EAAGA,GAAKD,EAAQC,IAAGC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  inputElDelay: document.querySelector('[name=\"delay\"]'),\n  inputElAmount: document.querySelector('[name=\"amount\"]'),\n  inputElNumber: document.querySelector('[name=\"step\"]'),\n  btnSubmit: document.querySelector('button'),\n};\n\nrefs.formEl.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delay = parseInt(refs.inputElDelay.value);\n  refs.inputElDelay.value = delay;\n  const amount = parseInt(refs.inputElAmount.value);\n  const step = parseInt(refs.inputElNumber.value);\n\n  let currentDelay = delay;\n  for (let i = 1; i <= amount; i++) {\n    setTimeout(() => createPromise(i, currentDelay), currentDelay);\n    currentDelay += step;\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        const message = `✅ Fulfilled promise ${position} in ${delay}ms`;\n        Notiflix.Notify.success(message);\n        resolve({ position, delay });\n      } else {\n        const message = `❌ Rejected promise ${position} in ${delay}ms`;\n        Notiflix.Notify.failure(message);\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","formEl","document","querySelector","inputElDelay","inputElAmount","inputElNumber","btnSubmit","addEventListener","event","setTimeout","position","delay","Promise","resolve","reject","shouldResolve","Math","random","message","concat","$parcel$interopDefault","Notify","success","message1","failure","$ce04d3a99e08e73b$var$createPromise","i","currentDelay","step","preventDefault","parseInt","value","amount","i1","_loop"],"version":3,"file":"03-promises.0b5f0bda.js.map"}